# Open the text file that has scores from a test which had four questions. Each row represents a student, each column is the student’s marks for that question.
# The first column gives the student’s serial number. The column headings also give the marks for each question (15, 25, 25, 15). Save this file on your Google drive.
# Write a Python program to do the following:
# (a) Compute the total for each student which is then appended along with the marks on each question and written to scores-out.csv as a comma separated file.
# (b) Compute the min, max, mean, and standard deviation for each question & display it. Also write these statistics to a file called scores.log.

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path = "/content/drive/MyDrive/Colab Notebooks/scores3.csv"
# reading csv file data
data = pd.read_csv(path)
data1 = data.drop(data.tail(3).index)
data2 = data1.drop(['Serial No.'], axis = 1)
df = pd.DataFrame(data2)
# computing total for each student
df['Total Score (80)'] = df['p1 (15)'] + df['p2 (25)'] + df['p3 (25)'] + df['p4 (15)']
df.to_csv('scores-out.csv')
df

# computing min, max, mean and standard deviation for each question
Stats = df.describe()
Stats = Stats.drop(['count', '25%', '50%', '75%'])
Stats.to_csv('score.log')
Stats



# The series expansion for e^x is given
# (a) Write a Python function that that takes x and n as inputs to calculate the n term approximation for exp(x).
# (b) Write a Python program that takes x as input and calculates (and displays) the 5 term approximation and the 10 term approximation using the above function.
# (c) Write a Python program that calculates the relative error for both approximations using the inbuilt exp(x) function (use “from math import *”).
# Calculate and display the relative errors for x = π.

from re import X
from math import *
import matplotlib.pyplot as plt
import numpy as np
# (a) for factorial 
def factorial(n):  
    return 1 if (n==1 or n==0) else n * factorial(n - 1);
# exp 
def expl(x,n):
      S=0
      for i in range(0, n):
         S = S + ((x**i)/factorial(i))
      return S
x= np.arange(0,15,0.01)
plt.plot(x,expl(x,100))
plt.show()

# (b) and (c) For 5 term appx. at x = pi
y = pi 
cal = expl(y,5)
a = exp(pi)
err = ((a-cal)/a)*100 
print('For 5 term appx. at x = pi')
print('calculated value from the series = ', cal)
print('actual value using the exp() function = ', a)
print('relative error = ' + str(err) + ' %')
# For 10 term appx. at x = pi
y = pi 
cal = expl(y,10)
a = exp(pi)
err = ((a-cal)/a)*100 
print('For 10 term appx. at x = pi')
print('calculated value from the series = ', cal)
print('actual value using the exp() function = ', a)
print('relative error = ' + str(err) + ' %')



# Write a Python program to plot the functions f(x) = e^(−x^2) and g(x) = e^(−x^2) sin(x) in the interval [−3π, 3π] using 200 data points.
# Use matplotlib.pyplot. The plot should have axis labels and a legend.

import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-3*np.pi, 3*np.pi, 200)
fig,axs = plt.subplots()
axs.set_title(r"Plots of $e^{-x^{2}}$ and $e^{-x^{2}} \sin(x)$")
axs.set_xlabel("x")
axs.set_ylabel("y")
axs.plot(x, np.exp(-x**2), color = 'blue', label= r'$e^{-x^{2}}$')
axs.plot(x, (np.exp(-x**2)*np.sin(x)), color = 'orange', label=r'$e^{-x^{2}} \sin(x)$')
axs.legend()
plt.show()



# The trapezoidal rule is given. Although this is implemented in scipy, for this assignment you have to code it from scratch as a python function called trap.
# Write a Python program that uses the trapezoidal rule to calculate the integral in Equation. (a) Use n = 100. (b) Use n = 1000.

# Numerical integration - Trapezoidal rule
import numpy as np
# define the gaussian function given in problem
def f(x):
  return np.exp(-(x**2))
# Trapezoial function to compute the integral
def trap(a,b,n):
  x = np.linspace(a,b,n)
  h = x[1] - x[0]    # could have also done (b-a)/(n-1) but not (b-a)/(n), because of the way linspace works
  sum = (f(a) + f(b))/2
  for i in range(1,len(x)-1):
    sum = sum + f(x[i])
  return (sum*h)
trap1= trap(-3*np.pi,3*np.pi,100)
trap2 = trap(-3*np.pi,3*np.pi,1000)
print('The value of the integral with n = 100 : ', trap1)
print('The value of the integral with n = 1000 : ', trap2)
print('Difference = ', (trap1 - trap2))



# How would you compute the integral in Eq (5) for the limits (−∞,∞)? (a) Write code using the appropriate module and explain the method used.
# (b) Comment on difference in the values of the integral for the limits (−∞,∞) vs the limits [−3π, 3π]. Hint: See the plot of f(x), the function being integrated.

import scipy.integrate as sci
import numpy as np
def func(x):
  return np.exp(-x**2)
# using scipy module and quad method for numerical integration (based on Fortran library QUADPACK - numerical quadrature for integration)
# it supports infinity limits as long as the function has no discontinuities and the integral converges
res, err = sci.quad(func, -np.inf, np.inf)
res1, err1 = sci.quad(func, -3*np.pi, 3*np.pi)
print('For limit -inf to inf integral = ', res)
print('For limit -3 pi to 3 pi integral = ', res1)

# Plot of the function
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-20, 20, 2000)
fig,axs = plt.subplots()
axs.spines['right'].set_color('none') # renoving top and right edges from the box
axs.spines['top'].set_color('none')
axs.xaxis.set_ticks_position('bottom')
axs.spines['bottom'].set_position(('data',0)) # set position of x spine to x=0
axs.yaxis.set_ticks_position('left')
axs.spines['left'].set_position(('data',0))   # set position of y spine to y=0
axs.set_title(r"Plot of $e^{-x^{2}}$")
axs.set_xlabel("x")
axs.set_ylabel("y")
axs.plot(x, np.exp(-x**2))
plt.show()
