import math as m
def functn(x):
  fx = (m.sin(x))*((15/x**3)-(6/x))
  ans = fx / x
  return ans
functn(m.pi/6)


import math as m
def functn(x,mu,sigma):
  answer = (1/(sigma*m.sqrt(2*m.pi)))*m.exp((-1/2)*((x-mu)/sigma)**2)
  return answer
functn(1,2,3)


# Plot graph of log(x)-1
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 10, 10)
y = np.log(x) - 1
plt.plot(x,y,"blue")
plt.title("Title")
plt.ylabel("Y label")
plt.xlabel("X label")


# Plot graph of log(x)-1 and sqrt(x)
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import mark_inset, inset_axes
x = np.linspace(0, 10, 100)
y1 = np.log(x**(-1))
y2 = np.sqrt(x)
plt.plot(x, y1, 'blue', label ='log(x)-1')
plt.plot(x, y2, 'red', label ='sqrt(x)')
plt.title("Title")
plt.ylabel("Y label")
plt.xlabel("X label")
plt.legend()
ax = plt.subplot(1, 1, 1)
ax.plot(x, y2)
axins = inset_axes(ax, 1.5, 1.5, loc=2, bbox_to_anchor=(1, 1))
axins.plot(x, y2)
x3, x4 = 2, 3
y3, y4 = np.sqrt(x3), np.sqrt(x4)
axins.set_xlim(x3, x4)
axins.set_ylim(y3, y4)
mark_inset(ax, axins, loc1=1, loc2=3, fc="none", ec="0.5")
plt.show() 


import sympy as sp
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import integrate
def f(x):
    return 1/(1-x)
def simpson(a, b,n):
    # calculating step size
    h = (b - a) / n
    # Finding sum 
    integration = f(a) + f(b) 
    for i in range(1,n):
        k = a + i*h 
        if i%2 == 0:
            integration = integration + 2 * f(k)
        else:
            integration = integration + 4 * f(k)   
    # Finding final integration value
    integration = integration * h/3   
    return integration 
# Inputs
a = float(input("Enter the lower limit: "))
b = float(input("Enter the upper limit: "))
n = int(input("Enter number of sub intervals: "))
fun = lambda x: 1/(1-x)
result = simpson(a, b, n)
print("Integration result by Simpson's 1/3 method is: %0.6f" % (result) )
print("Integration result by Sympy is:", (scipy.integrate.quad(fun, a, b)))
